import json
import logging
from aiogram import types, Router, F
from aiogram.exceptions import TelegramBadRequest
from bot_config import telegram_client
from settings import settings
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

router = Router()
active_requests = {}


@router.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    try:
        logger.info(f"Web app data received from user {message.from_user.id}")
        logger.debug(f"Raw web app data: {message.web_app_data.data}")

        data = json.loads(message.web_app_data.data)
        form_type = data.get("form", "unknown")

        logger.info(f"Form type: {form_type}")
        logger.debug(f"Parsed data: {data}")

        if form_type == "callback":
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º get() —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
            name = data.get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            phone = data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            topic = data.get("topic", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            time = data.get("time", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

            text_msg = (
                f"üîî–ó–∞–∫–∞–∑–∞–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {name.capitalize()}\n"
                f"–Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –≤ {time}\n"
                f'—Å —Ç–µ–º–æ–π –∑–≤–æ–Ω–∫–∞ "{topic.capitalize()}".\n\n'
                f"–î–ª—è —Å–≤—è–∑–∏ –≤ —á–∞—Ç–µ @{message.from_user.username or '–Ω–µ—Ç username'}"
            )

            admin_ids = [int(chat_id) for chat_id in settings.admin_chat_id.split(",") if chat_id]
            logger.info(f"Sending callback request to admins: {admin_ids}")

            for admin_id in admin_ids:
                try:
                    await telegram_client.post(method="sendMessage", chat_id=admin_id, text=text_msg)
                    logger.info(f"Callback request sent to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Failed to send callback request to admin {admin_id}: {e}")

            await message.answer(
                f"{message.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ!\n"
                "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω–∞!\n"
                "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è."
            )
            logger.info(f"Callback confirmation sent to user {message.from_user.id}")

        elif form_type == "problem":
            name = data.get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            phone = data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            problem = data.get("topic", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

            active_requests[message.chat.id] = {
                "name": name,
                "phone": phone,
                "problem": problem,
                "files": []
            }

            logger.info(f"Problem request started for user {message.from_user.id}: name={name}, phone={phone}")
            logger.debug(f"Problem description: {problem}")

            await message.answer(
                f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
                f"–ò–º—è: {name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {problem}\n\n"
                "*üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.*",
                parse_mode=ParseMode.MARKDOWN,
            )
            logger.info(f"Problem request instructions sent to user {message.from_user.id}")

        else:
            logger.warning(f"Unknown form type from user {message.from_user.id}: {form_type}")
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error from user {message.from_user.id}: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Unexpected error in web_app_data_handler for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤
@router.message(F.photo | F.video | F.document)
async def handle_files(message: types.Message):
    try:
        if message.chat.id not in active_requests:
            logger.warning(f"File received from user {message.from_user.id} without active request")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.")
            return

        req = active_requests[message.chat.id]
        file_type = None
        file_id = None

        if message.photo:
            file_type = "photo"
            file_id = message.photo[-1].file_id
            req["files"].append(("photo", file_id))
        elif message.video:
            file_type = "video"
            file_id = message.video.file_id
            req["files"].append(("video", file_id))
        elif message.document:
            file_type = "document"
            file_id = message.document.file_id
            req["files"].append(("document", file_id))

        logger.info(f"File added to request for user {message.from_user.id}: type={file_type}, id={file_id}")
        logger.debug(f"Total files in request: {len(req['files'])}")

        await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    except Exception as e:
        logger.error(f"Error handling file from user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text == "/done")
async def finalize_request_command(message: types.Message):
    await finalize_request(message.chat.id, message)


async def finalize_request(chat_id: int, message: types.Message):
    try:
        req = active_requests.pop(chat_id, None)
        if not req:
            logger.warning(f"Finalize request called for user {message.from_user.id} but no active request found")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
            return

        text_msg = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {req['name'].capitalize()}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n\n"
            f"–î–ª—è —Å–≤—è–∑–∏: @{message.from_user.username or '–Ω–µ—Ç username'}"
        )

        admin_ids = [int(chat_id) for chat_id in settings.admin_chat_id.split(",") if chat_id]
        logger.info(f"Sending problem request to admins: {admin_ids}, files count: {len(req['files'])}")

        for admin_id in admin_ids:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await telegram_client.post(method="sendMessage", chat_id=admin_id, text=text_msg)
                logger.info(f"Problem request text sent to admin {admin_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                for ftype, fid in req["files"]:
                    try:
                        if ftype == "photo":
                            await telegram_client.post(method="sendPhoto", chat_id=admin_id, photo=fid)
                        elif ftype == "video":
                            await telegram_client.post(method="sendVideo", chat_id=admin_id, video=fid)
                        elif ftype == "document":
                            await telegram_client.post(method="sendDocument", chat_id=admin_id, document=fid)
                        logger.info(f"File sent to admin {admin_id}: type={ftype}")
                    except Exception as file_e:
                        logger.error(f"Failed to send file to admin {admin_id}: {file_e}")

            except Exception as admin_e:
                logger.error(f"Failed to send request to admin {admin_id}: {admin_e}")

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.info(f"Request finalized for user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error finalizing request for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")