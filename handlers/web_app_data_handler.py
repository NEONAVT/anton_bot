import json
from aiogram import types, Router, F
from bot_config import telegram_client
from settings import settings

router = Router()
active_requests = {}

@router.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    data = json.loads(message.web_app_data.data)
    form_type = data.get("form")

    if form_type == "callback":
        # –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
        text_msg = (
            f"üîî–ó–∞–∫–∞–∑–∞–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {data['name'].capitalize()}\n"
            f"–Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {data['phone']} –≤ {data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f'—Å —Ç–µ–º–æ–π –∑–≤–æ–Ω–∫–∞ "{data["topic"].capitalize()}".\n\n'
            f"–î–ª—è —Å–≤—è–∑–∏ –≤ —á–∞—Ç–µ @{message.from_user.username or '–Ω–µ—Ç username'}"
        )

        admin_ids = [int(chat_id) for chat_id in settings.admin_chat_id.split(",") if chat_id]
        for chat_id in admin_ids:
            await telegram_client.post(
                method="sendMessage",
                chat_id=chat_id,
                text=text_msg
            )
        await message.answer(
            f"{message.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ!\n"
            "üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω–∞!\n"
            "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è."
        )

    elif form_type == "problem":
        # –ó–∞—è–≤–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        active_requests[message.chat.id] = {
            "name": data["name"],
            "phone": data["phone"],
            "problem": data["topic"],
            "files": []
        }
        await message.answer(
            f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {data['topic']}\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
        )

# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
@router.message(F.photo | F.video | F.document)
async def handle_files(message: types.Message):
    if message.chat.id not in active_requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.")
        return

    req = active_requests[message.chat.id]

    if message.photo:
        req["files"].append(("photo", message.photo[-1].file_id))
    elif message.video:
        req["files"].append(("video", message.video.file_id))
    elif message.document:
        req["files"].append(("document", message.document.file_id))

    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ.")

async def finalize_request(chat_id: int, message: types.Message):
    req = active_requests.pop(chat_id, None)
    if not req:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return

    text_msg = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {req['name'].capitalize()}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n\n"
        f"–î–ª—è —Å–≤—è–∑–∏: @{message.from_user.username or '–Ω–µ—Ç username'}"
    )

    admin_ids = [int(chat_id) for chat_id in settings.admin_chat_id.split(",") if chat_id]
    for admin_id in admin_ids:
        await telegram_client.post(method="sendMessage", chat_id=admin_id, text=text_msg)
        for ftype, fid in req["files"]:
            if ftype == "photo":
                await telegram_client.post(method="sendPhoto", chat_id=admin_id, photo=fid)
            elif ftype == "video":
                await telegram_client.post(method="sendVideo", chat_id=admin_id, video=fid)
            elif ftype == "document":
                await telegram_client.post(method="sendDocument", chat_id=admin_id, document=fid)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
