import logging
from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
from keyboards import prices_kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üßæ –°—Ç–æ–∏–º–æ—Å—Ç—å")
async def prices_callback(message: Message):
    try:
        logger.info(f"User {message.from_user.id} ({message.from_user.username}) requested prices")

        await message.delete()

        await message.answer(
            "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥*\n\n"
            "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∑–∞–º–µ–Ω–æ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≥–∞–∑–æ–≤—ã—Ö –∫–æ—Ç–ª–æ–≤, –∫–æ–ª–æ–Ω–æ–∫, –±–æ–π–ª–µ—Ä–æ–≤, "
            "–º–æ–Ω—Ç–∞–∂–æ–º —Å–∏—Å—Ç–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è —Å –Ω—É–ª—è, –∞ —Ç–∞–∫–∂–µ —Ä–µ–º–æ–Ω—Ç–æ–º —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏.\n\n"
            "–ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —É–Ω–∏–∫–∞–ª–µ–Ω, –ø–æ—ç—Ç–æ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ "
            "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ —É—Å–ª–æ–≤–∏–π.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ ‚Äî "
            "–º—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=prices_kb
        )

        logger.info(f"Prices message successfully updated for user {message.from_user.id}")

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug(f"Message not modified for user {message.from_user.id} - same content")
            await message.answer()
        else:
            logger.error(f"TelegramBadRequest for user {message.from_user.id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=False)

    except Exception as e:
        logger.error(f"Unexpected error for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=False)