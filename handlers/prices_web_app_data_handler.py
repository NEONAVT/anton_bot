import json

from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from keyboards import start_kb
from bot_config import telegram_client
from settings import settings

router = Router()
active_requests = {}


@router.message(F.web_app_data)
async def prices_web_app_data_handler(message: Message):
    data = json.loads(message.web_app_data.data)
    active_requests[message.chat.id] = {
        "name": data["name"],
        "phone": data["phone"],
        "problem": data["topic"],
        "files": []
    }
    await message.answer(
        f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {data['topic']}\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
    )


# –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤
@router.message(F.photo | F.video | F.document)
async def handle_files(message: Message):
    if message.chat.id not in active_requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.")
        return

    req = active_requests[message.chat.id]

    if message.photo:
        file_id = message.photo[-1].file_id
        req["files"].append(("photo", file_id))
    elif message.video:
        file_id = message.video.file_id
        req["files"].append(("video", file_id))
    elif message.document:
        file_id = message.document.file_id
        req["files"].append(("document", file_id))

    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ.")

    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
    # await finalize_request(msg.chat.id)


async def finalize_request(chat_id: int, message: Message):
    req = active_requests.pop(chat_id, None)
    if not req:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    text_msg = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {req['name'].capitalize()}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem']}\n\n"
        f"–î–ª—è —Å–≤—è–∑–∏: @{message.from_user.username or '–Ω–µ—Ç username'}"
    )

    admin_ids = [int(chat_id) for chat_id in settings.admin_chat_id.split(",") if chat_id]
    for admin_id in admin_ids:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await telegram_client.post(
            method="sendMessage",
            chat_id=admin_id,
            text=text_msg
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for ftype, fid in req["files"]:
            if ftype == "photo":
                await telegram_client.post(
                    method="sendPhoto",
                    chat_id=admin_id,
                    photo=fid
                )
            elif ftype == "video":
                await telegram_client.post(
                    method="sendVideo",
                    chat_id=admin_id,
                    video=fid
                )
            elif ftype == "document":
                await telegram_client.post(
                    method="sendDocument",
                    chat_id=admin_id,
                    document=fid
                )

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
